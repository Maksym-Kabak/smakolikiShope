{"version":3,"file":"check-is-user-exist-by-email.middleware.js","sourceRoot":"","sources":["../../../src/middleware/user/check-is-user-exist-by-email.middleware.ts"],"names":[],"mappings":";;;AACA,8CAAgD;AAChD,yCAAwD;AACxD,+CAAwD;AAG3C,QAAA,kCAAkC,GAC7C,KAAK,EAAE,GAAqB,EAAE,GAAa,EAAE,IAAkB,EAAgC,EAAE;IAC/F,MAAM,EAAC,KAAK,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;IACzB,MAAM,WAAW,GAAG,MAAM,kBAAW,CAAC,eAAe,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;IAE/D,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,IAAI,CAAC,IAAI,qBAAY,CAAC,mCAAuB,CAAC,SAAS,EAAE,qBAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;KAClG;IAED,GAAG,CAAC,IAAI,GAAG,WAAW,CAAC;IACvB,IAAI,EAAE,CAAC;AACT,CAAC,CAAC","sourcesContent":["import {NextFunction, Response} from 'express';\r\nimport {userService} from '../../services/user';\r\nimport {customErrors, ErrorHandler} from '../../errors';\r\nimport {ResponseStatusCodesEnum} from '../../constants';\r\nimport {IRequestExtended} from '../../models';\r\n\r\nexport const checkIsUserExistsByEmailMiddleware =\r\n  async (req: IRequestExtended, res: Response, next: NextFunction): Promise<void | NextFunction> => {\r\n    const {email} = req.body;\r\n    const userByEmail = await userService.findOneByParams({email});\r\n\r\n    if (!userByEmail) {\r\n      return next(new ErrorHandler(ResponseStatusCodesEnum.NOT_FOUND, customErrors.NOT_FOUND.message));\r\n    }\r\n\r\n    req.user = userByEmail;\r\n    next();\r\n  };\r\n"]}