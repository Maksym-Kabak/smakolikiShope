{"version":3,"file":"check-is-email-exists.middleware.js","sourceRoot":"","sources":["../../../src/middleware/user/check-is-email-exists.middleware.ts"],"names":[],"mappings":";;;AACA,8CAAgD;AAChD,yCAAwD;AACxD,+CAAwD;AAE3C,QAAA,4BAA4B,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAgC,EAAE;IAClI,MAAM,EAAC,KAAK,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;IACzB,MAAM,WAAW,GAAG,MAAM,kBAAW,CAAC,eAAe,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;IAE/D,IAAI,WAAW,EAAE;QACf,OAAO,IAAI,CAAC,IAAI,qBAAY,CAC1B,mCAAuB,CAAC,WAAW,EACnC,qBAAY,CAAC,2BAA2B,CAAC,OAAO,EAChD,qBAAY,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC,CAAC;KACnD;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC","sourcesContent":["import {NextFunction, Request, Response} from 'express';\r\nimport {userService} from '../../services/user';\r\nimport {customErrors, ErrorHandler} from '../../errors';\r\nimport {ResponseStatusCodesEnum} from '../../constants';\r\n\r\nexport const checkIsEmailExistsMiddleware = async (req: Request, res: Response, next: NextFunction): Promise<void | NextFunction> => {\r\n  const {email} = req.body;\r\n  const userByEmail = await userService.findOneByParams({email});\r\n\r\n  if (userByEmail) {\r\n    return next(new ErrorHandler(\r\n      ResponseStatusCodesEnum.BAD_REQUEST,\r\n      customErrors.BAD_REQUEST_USER_REGISTERED.message,\r\n      customErrors.BAD_REQUEST_USER_REGISTERED.code));\r\n  }\r\n  next();\r\n};\r\n"]}