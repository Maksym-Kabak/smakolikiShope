{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../src/services/auth/auth.service.ts"],"names":[],"mappings":";;;AAAA,6CAAgD;AAGhD,MAAM,WAAW;IACf,eAAe,CAAC,WAAkC;QAChD,MAAM,aAAa,GAAG,IAAI,2BAAgB,CAAC,WAAW,CAAC,CAAC;QAExD,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,UAA2D;;QAC/E,MAAM,YAAY,GAAG,MAAM,2BAAgB;aACxC,OAAO,CAAC,UAAU,CAAC;aACnB,QAAQ,CAAC,QAAQ,CAAC;aAClB,MAAM,CAAC,EAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAC,CAAQ,CAAC;QAEtC,aAAO,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,0CAAE,MAAM,GAAG;IACxC,CAAC;IAED,WAAW,CAAC,YAA6D;QACvE,OAAO,2BAAgB,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,IAAI,EAAE,CAAC;IAChE,CAAC;CAEF;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import {AccessTokenModel} from '../../dataBase';\r\nimport {IAccessToken, IUser} from '../../models';\r\n\r\nclass AuthService {\r\n  createTokenPair(tokenObject: Partial<IAccessToken>): Promise<IAccessToken> {\r\n    const tokenToCreate = new AccessTokenModel(tokenObject);\r\n\r\n    return tokenToCreate.save();\r\n  }\r\n\r\n  async findUserByToken(findObject: { accessToken?: string, refreshToken?: string }): Promise<IUser | null> {\r\n    const tokenAndUser = await AccessTokenModel\r\n      .findOne(findObject)\r\n      .populate('userId')\r\n      .select({userId: 1, _id: 0}) as any;\r\n\r\n    return tokenAndUser?.userId?.toJSON();\r\n  }\r\n\r\n  removeToken(removeObject: { accessToken?: string, refreshToken?: string }): Promise<IAccessToken | null> {\r\n    return AccessTokenModel.findOneAndDelete(removeObject).exec();\r\n  }\r\n\r\n}\r\n\r\nexport const authService = new AuthService();\r\n"]}