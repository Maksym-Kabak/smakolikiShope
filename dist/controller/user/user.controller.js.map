{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["../../../src/controller/user/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {NextFunction, Request, Response} from 'express';\r\n\r\nimport {ActionEnum, LogEnum, RequestHeadersEnum, ResponseStatusCodesEnum, UserStatusEnum} from '../../constants';\r\nimport {hashPassword, tokinizer} from '../../helpers';\r\nimport {emailService, logService, userService} from '../../services';\r\nimport {IRequestExtended, IUser} from '../../models';\r\nimport {customErrors, ErrorHandler} from '../../errors';\r\n\r\nclass UserController {\r\n  async createUser(req: Request, res: Response, next: NextFunction) {\r\n    const user = req.body as IUser;\r\n\r\n    user.password = await hashPassword(user.password);\r\n\r\n    // await comparePassword('xx', 'xx');\r\n\r\n    const {_id} = await userService.createUser(user);\r\n    const {access_token} = tokinizer(ActionEnum.USER_REGISTER);\r\n\r\n    await userService.addActionToken(_id, {action: ActionEnum.USER_REGISTER, token: access_token});\r\n    await emailService.sendEmail(user.email, ActionEnum.USER_REGISTER, {token: access_token});\r\n    await logService.createLog({event: LogEnum.USER_REGISTERED, userId: _id});\r\n\r\n    res.sendStatus(ResponseStatusCodesEnum.CREATED);\r\n  }\r\n\r\n  async confirmUser(req: IRequestExtended, res: Response, next: NextFunction) {\r\n    const {_id, status, tokens = []} = req.user as IUser;\r\n    const tokenToDelete = req.get(RequestHeadersEnum.AUTHORIZATION);\r\n\r\n    if (status !== UserStatusEnum.PENDING) {\r\n      return next(\r\n        new ErrorHandler(\r\n          ResponseStatusCodesEnum.BAD_REQUEST,\r\n          customErrors.BAD_REQUEST_USER_ACTIVATED.message,\r\n          customErrors.BAD_REQUEST_USER_ACTIVATED.code)\r\n      );\r\n    }\r\n\r\n    await userService.updateUserByParams({_id}, {status: UserStatusEnum.CONFIRMED});\r\n\r\n    const index = tokens?.findIndex(({action, token}) => {\r\n      return token === tokenToDelete && action === ActionEnum.USER_REGISTER;\r\n    });\r\n\r\n    if (index !== -1) {\r\n      tokens?.splice(index, 1);\r\n\r\n      await userService.updateUserByParams({_id}, {tokens} as Partial<IUser>);\r\n    }\r\n\r\n    await logService.createLog({event: LogEnum.USER_CONFIRMED, userId: _id});\r\n\r\n    res.end();\r\n  }\r\n\r\n  async forgotPassword(req: IRequestExtended, res: Response, next: NextFunction) {\r\n    const {_id, email} = req.user as IUser;\r\n    const {access_token} = tokinizer(ActionEnum.FORGOT_PASSWORD);\r\n\r\n    await userService.addActionToken(_id, {token: access_token, action: ActionEnum.FORGOT_PASSWORD});\r\n    await emailService.sendEmail(email, ActionEnum.FORGOT_PASSWORD, {token: access_token});\r\n\r\n    res.end();\r\n  }\r\n\r\n  async setForgotPass(req: IRequestExtended, res: Response, next: NextFunction) {\r\n    const {_id, tokens = []} = req.user as IUser;\r\n    const {password} = req.body;\r\n    const tokenToDelete = req.get(RequestHeadersEnum.AUTHORIZATION);\r\n    const hashPass = await hashPassword(password);\r\n\r\n    await userService.updateUserByParams({_id}, {password: hashPass});\r\n\r\n    const index = tokens.findIndex(({action, token}) => {\r\n      return token === tokenToDelete && action === ActionEnum.FORGOT_PASSWORD;\r\n    });\r\n\r\n    if (index !== -1) {\r\n      tokens.splice(index, 1);\r\n\r\n      await userService.updateUserByParams({_id}, {tokens} as Partial<IUser>);\r\n    }\r\n\r\n    res.end();\r\n  }\r\n}\r\n\r\nexport const userController = new UserController();\r\n"]}